package gen

import (
	"fmt"
	"os"
	"text/template"

	"agola.io/agola/internal/sqlg"
	"agola.io/agola/internal/sqlg/sql"

	"github.com/Masterminds/sprig/v3"
	"github.com/huandu/xstrings"
)

type DDLData struct {
	Version   uint
	DBType    string
	TableDefs []DDLDataTable
	IndexDefs []string
}

type DDLDataTable struct {
	Table          string
	ColumnDefs     []string
	ConstraintDefs []string
}

type DDLDataIndexes struct {
	DDL string
}

func genDDLData(gd *genData, dbType sql.Type) DDLData {
	objectsInfo := []sqlg.ObjectInfo{}
	for _, oi := range gd.ObjectsInfo {
		oi.Fields = append(objectMetaFields(), oi.Fields...)

		objectsInfo = append(objectsInfo, oi)
	}

	objectsInfo = sqlg.PopulateObjectsInfo(objectsInfo, dbType)

	data := DDLData{
		Version: gd.Version,
		DBType:  xstrings.FirstRuneToUpper(string(dbType)),
	}

	for _, oi := range objectsInfo {
		tableDef := DDLDataTable{Table: oi.Table}

		for _, of := range oi.Fields {
			colDef := fmt.Sprintf("%s %s", of.ColName, of.SQLType)
			if !of.Nullable {
				colDef += " NOT NULL"
			}
			if of.Unique {
				colDef += " UNIQUE"
			}

			tableDef.ColumnDefs = append(tableDef.ColumnDefs, colDef)

		}

		tableDef.ConstraintDefs = oi.Constraints

		data.TableDefs = append(data.TableDefs, tableDef)

		data.IndexDefs = append(data.IndexDefs, oi.Indexes...)
	}

	return data
}

func genDDL(gd *genData) {
	for _, dbType := range []sql.Type{sql.Postgres, sql.Sqlite3} {
		data := genDDLData(gd, dbType)
		f, err := os.Create(fmt.Sprintf("ddl_%s_v%d.go", dbType, gd.Version))
		if err != nil {
			panic(err)
		}
		defer f.Close()

		if err := ddlTemplate.Execute(f, data); err != nil {
			panic(err)
		}
	}
}

var ddlTemplate = template.Must(template.New("").Funcs(sprig.TxtFuncMap()).Funcs(funcs).Parse(`// Code generated by go generate; DO NOT EDIT.
package db

var DDL{{ .DBType }}V{{ .Version }} = []string{
{{- range $tableDef := .TableDefs }}
	"create table if not exists {{ $tableDef.Table }} ({{ $tableDef.ColumnDefs | join ", "}}, PRIMARY KEY (id){{ if $tableDef.ConstraintDefs }}, {{ $tableDef.ConstraintDefs | join ", "}}{{end}})",
{{- end }}

	// indexes

{{- range $index := .IndexDefs }}
	"{{ $index }}",
{{- end }}
}
`))
